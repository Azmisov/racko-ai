/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package reinforcement;
import interfaces.*;
import racko.Game;
import client.*;
import java.util.Random;
import java.io.*;
import models.ModelRandom;

public class ModelExploiter extends Model{
	private ReinforcementLearner rl;
	private double score;
	
	public ModelExploiter(){
		boolean accept = false;
		while (!accept){
			ModelExplorer PE = new ModelExplorer();
			PE.train();
			rl = PE.getRL();

			Player[] players = new Player[]{
				new PlayerComputer(this),
				new PlayerComputer(new ModelRandom())
			};
			Game g = Game.create(players, 5, 1, false);
			int play_games = 4000;
			int epoch_every = 2000;
			int epochs = 0;
			for (int i = 0; i < play_games; i++){
				Random rand = new Random();
				g.play(rand.nextInt(players.length));
				if (i > 0 && i % epoch_every == 0){
					epochs++;
					//Notify players of epoch
					for (Player p: players)
						p.epoch();
					
					double ewins = players[0].EPOCH_wins;
					if (ewins > 0.7){
						accept = true;
						score = ewins;
					}
					else
						System.out.println("Reinforcement Learner Rejected score of " + ewins);
				}
			}
		}
		save();
	}

	@Override
	public boolean decideDraw(int turn) {
		return rl.fromDiscardForReal(game, rack);
	}
	@Override
	public int decidePlay(int turn, int drawn, boolean fromDiscard) {
		return rl.cardPositionForReal(game, rack, drawn);
	}
	
	@Override
	public void scoreRound(boolean won, int score){
		rl.gameEnd(won);
	}
	
	public void save(){
		FileWriter writer = null;
		try {
			Random rand = new Random();
			String fileName = "aReinforcementLearner" + rand.nextInt() + ".txt";
			writer = new FileWriter(fileName);
			String toWrite = "" + score + "\n";
			toWrite = toWrite + rl.saveString();
			writer.write(toWrite);
		} catch (IOException ex) {
			System.out.println("Failed to store reinforcement learner!!!");
		} finally {
			try {
				writer.close();
			} catch (IOException ex) {
				System.out.println("Failed to store reinforcement learner!!!");
			}
		}
	}
}
